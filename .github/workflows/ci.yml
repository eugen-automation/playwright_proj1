name: Playwright Tests

on: 
  push:
    branches: [ main, dev, staging ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    - cron: '0 2 * * 1' # Weekly run on Monday at 2 AM

permissions:
  contents: read
  pages: write
  id-token: write

# Ensure only one Pages deployment runs at a time
concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  # Pre-flight checks
  validate:
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.check.outputs.should-run }}
      affected-areas: ${{ steps.check.outputs.affected }}
      run-timestamp: ${{ steps.timestamp.outputs.timestamp }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Check if tests should run
        id: check
        run: |
          # Always run on schedule or main branch
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "affected=all" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for test-related changes
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '\.(test|spec)\.(js|ts)$|playwright\.config|package\.json'; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "affected=tests" >> $GITHUB_OUTPUT
          elif git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '\.(js|ts|tsx|jsx)$'; then
            echo "should-run=true" >> $GITHUB_OUTPUT  
            echo "affected=code" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "affected=none" >> $GITHUB_OUTPUT
          fi

  # Lint and code quality checks
  quality-check:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-run-tests == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Check package.json scripts
        run: |
          echo "📋 Available npm scripts:"
          npm run --silent 2>/dev/null || echo "No npm scripts defined"
          
      - name: Run linting (if configured)
        run: |
          # Check if lint script exists
          if npm run --silent 2>&1 | grep -q "lint"; then
            echo "🔍 Running lint..."
            npm run lint
          else
            echo "ℹ️ No lint script configured, skipping"
          fi
        continue-on-error: true

      - name: Run formatting check (if configured)
        run: |
          # Check if format check script exists
          if npm run --silent 2>&1 | grep -q "format:check\|prettier:check"; then
            echo "✨ Running format check..."
            npm run format:check 2>/dev/null || npm run prettier:check 2>/dev/null || echo "Format check completed"
          else
            echo "ℹ️ No format check script configured, skipping"
          fi
        continue-on-error: true

      - name: Run type checking (if configured)
        run: |
          # Check if TypeScript is configured
          if [ -f "tsconfig.json" ]; then
            echo "📘 Running TypeScript check..."
            npx tsc --noEmit || echo "TypeScript issues found"
          else
            echo "ℹ️ No TypeScript configuration found, skipping"
          fi
        continue-on-error: true

      - name: Run unit tests (if configured)
        run: |
          # Check if test script exists
          if npm run --silent 2>&1 | grep -q "test"; then
            echo "🧪 Running unit tests..."
            npm test
          else
            echo "ℹ️ No test script configured, skipping"
          fi
        continue-on-error: true

  # Security and dependency checks
  security-scan:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-run-tests == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=moderate --production || echo "Security vulnerabilities found"
          npm audit fix --dry-run || echo "Potential fixes available"


  # Main test execution with matrix strategy
  test:
    needs: [validate, quality-check]
    if: needs.validate.outputs.should-run-tests == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    container:
      image: mcr.microsoft.com/playwright:v1.55.0-noble
      options: --user 1001

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js with caching
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      # 3. Cache dependencies for faster builds
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. Install dependencies
      - name: Install dependencies
        run: npm ci

      # 5. Run Playwright tests with specific browser
      - name: Run Playwright tests (${{ matrix.browser }})
        run: |
          echo "🎭 Running tests on ${{ matrix.browser }}..."
          npx playwright test --project=${{ matrix.browser }} --reporter=html,json
        continue-on-error: ${{ github.event_name == 'pull_request' }}
        env:
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}

      # 6. Upload test results as artifacts (per browser)
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
            results.json
          retention-days: 30

  # Performance benchmarks
  benchmark:
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: always() && needs.validate.outputs.should-run-tests == 'true' && github.ref == 'refs/heads/main'
    
    container:
      image: mcr.microsoft.com/playwright:v1.55.0-noble
      options: --user 1001

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          echo "🚀 Running performance benchmarks..."
          
          # Create a simple performance test if it doesn't exist
          if [ ! -f "tests/performance.spec.ts" ]; then
            mkdir -p tests
            cat > tests/performance.spec.ts << EOF
          import { test, expect } from '@playwright/test';

          test.describe('Performance Tests', () => {
            test('page load performance', async ({ page }) => {
              const start = Date.now();
              await page.goto('https://playwright.dev');
              const loadTime = Date.now() - start;
              
              console.log(\`Page load time: \${loadTime}ms\`);
              expect(loadTime).toBeLessThan(5000);
            });

            test('navigation performance', async ({ page }) => {
              await page.goto('https://playwright.dev');
              
              const start = Date.now();
              await page.click('text=Docs');
              await page.waitForLoadState('networkidle');
              const navigationTime = Date.now() - start;
              
              console.log(\`Navigation time: \${navigationTime}ms\`);
              expect(navigationTime).toBeLessThan(3000);
            });
          });
          EOF
          fi
          
          npx playwright test tests/performance.spec.ts --reporter=json > performance-results.json || true

      - name: Process performance results
        run: |
          # Create performance summary
          cat > performance-summary.json << EOF
          {
            "timestamp": "${{ needs.validate.outputs.run-timestamp }}",
            "run_id": "${{ github.run_id }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "results": $(cat performance-results.json 2>/dev/null || echo '{}')
          }
          EOF

      - name: Store benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ github.run_id }}
          path: |
            performance-results.json
            performance-summary.json
          retention-days: 90

  # Consolidate reports with proper history tracking
  deploy-reports:
    needs: [validate, test, benchmark, security-scan]
    runs-on: ubuntu-latest
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging')
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # 1. Checkout for any additional files needed
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Download all test artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 3. Download existing reports to preserve history
      - name: Download and preserve existing history
        run: |
          echo "📚 Preserving historical data..."
          
          # Try to get existing runs history
          PAGES_URL="${{ github.server_url }}/${{ github.repository }}/pages"
          REPO_PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          
          # Create base structure
          mkdir -p reports/history
          
          # Try to download existing history
          if curl -f -s "${REPO_PAGES_URL}/history/runs.json" -o existing_runs.json 2>/dev/null; then
            echo "Found existing history file"
            cp existing_runs.json reports/history/existing_runs.json
          else
            echo "No existing history found, starting fresh"
            echo "[]" > reports/history/existing_runs.json
          fi

      # 4. Consolidate reports and create comprehensive structure with proper history
      - name: Organize and consolidate reports with proper history
        run: |
          echo "📊 Building comprehensive report dashboard with proper history..."
          
          # Create the main structure
          mkdir -p reports/run-${GITHUB_RUN_ID}
          mkdir -p reports/latest
          mkdir -p reports/by-browser
          mkdir -p reports/history
          mkdir -p reports/trends
          
          
          # Process each browser report
          for browser in chromium firefox webkit; do
            if [ -d "artifacts/playwright-report-${browser}-${GITHUB_RUN_ID}" ]; then
              echo "Processing ${browser} reports..."
              
              # Create browser-specific directories
              mkdir -p reports/by-browser/${browser}
              mkdir -p reports/run-${GITHUB_RUN_ID}/${browser}
              mkdir -p reports/latest/${browser}
              
              # Copy reports
              if [ -d "artifacts/playwright-report-${browser}-${GITHUB_RUN_ID}/playwright-report" ]; then
                cp -r artifacts/playwright-report-${browser}-${GITHUB_RUN_ID}/playwright-report/* reports/by-browser/${browser}/
                cp -r artifacts/playwright-report-${browser}-${GITHUB_RUN_ID}/playwright-report/* reports/run-${GITHUB_RUN_ID}/${browser}/
                cp -r artifacts/playwright-report-${browser}-${GITHUB_RUN_ID}/playwright-report/* reports/latest/${browser}/
              fi
              
              # Process JSON results for trends
              if [ -f "artifacts/playwright-report-${browser}-${GITHUB_RUN_ID}/results.json" ]; then
                cp artifacts/playwright-report-${browser}-${GITHUB_RUN_ID}/results.json reports/trends/${browser}-${GITHUB_RUN_ID}.json
              fi
            fi
          done
          
          # Create updated history with existing runs + current run
          echo "📋 Creating updated run history..."
          
          # Read existing history or start with empty array
          if [ -f "reports/history/existing_runs.json" ]; then
            EXISTING_RUNS=$(cat reports/history/existing_runs.json)
          else
            EXISTING_RUNS="[]"
          fi
          
          # Create current run data
          CURRENT_RUN='{
            "run_id": "'${GITHUB_RUN_ID}'",
            "timestamp": "'${{ needs.validate.outputs.run-timestamp }}'",
            "commit": "'${GITHUB_SHA:0:7}'",
            "branch": "'${GITHUB_REF_NAME}'",
            "trigger": "'${GITHUB_EVENT_NAME}'",
            "url": "run-'${GITHUB_RUN_ID}'/",
            "status": "completed"
          }'
          
          # Merge existing runs with current run (keep last 50 runs)
          echo "${EXISTING_RUNS}" | jq --argjson current "${CURRENT_RUN}" '
            . + [$current] 
            | sort_by(.run_id | tonumber) 
            | reverse 
            | .[0:50]
          ' > reports/history/runs.json
          
          # Create comprehensive index page without Compare tab
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>🎭 Playwright Test Dashboard</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      padding: 20px;
                  }
                  .container { 
                      max-width: 1200px; 
                      margin: 0 auto; 
                      background: white;
                      border-radius: 12px;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                      overflow: hidden;
                  }
                  .header {
                      background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
                      color: white;
                      padding: 30px;
                      text-align: center;
                  }
                  .header h1 { font-size: 2.5em; margin-bottom: 10px; }
                  .header p { opacity: 0.9; font-size: 1.1em; }
                  .nav-tabs {
                      display: flex;
                      background: #f8f9fa;
                      border-bottom: 1px solid #dee2e6;
                  }
                  .nav-tab {
                      flex: 1;
                      padding: 15px 20px;
                      background: none;
                      border: none;
                      cursor: pointer;
                      font-size: 16px;
                      transition: all 0.2s;
                      border-bottom: 3px solid transparent;
                  }
                  .nav-tab:hover { background: #e9ecef; }
                  .nav-tab.active { 
                      background: white; 
                      border-bottom-color: #3498db;
                      font-weight: bold;
                  }
                  .tab-content { display: none; padding: 30px; }
                  .tab-content.active { display: block; }
                  .section { margin-bottom: 30px; }
                  .section h2 { 
                      color: #2c3e50; 
                      border-bottom: 2px solid #3498db; 
                      padding-bottom: 10px; 
                      margin-bottom: 20px; 
                  }
                  .report-grid { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
                      gap: 20px; 
                  }
                  .report-card { 
                      background: #f8f9fa; 
                      border-radius: 8px; 
                      padding: 20px; 
                      border-left: 4px solid #3498db;
                      transition: transform 0.2s, box-shadow 0.2s;
                  }
                  .report-card:hover { 
                      transform: translateY(-2px); 
                      box-shadow: 0 5px 15px rgba(0,0,0,0.1); 
                  }
                  .report-link { 
                      display: inline-block;
                      background: #3498db;
                      color: white;
                      padding: 10px 20px;
                      text-decoration: none;
                      border-radius: 5px;
                      margin: 5px 5px 0 0;
                      transition: background 0.2s;
                  }
                  .report-link:hover { background: #2980b9; }
                  .browser-chromium { border-left-color: #4CAF50; }
                  .browser-firefox { border-left-color: #FF9800; }
                  .browser-webkit { border-left-color: #9C27B0; }
                  .info-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                      gap: 15px;
                      margin-top: 20px;
                  }
                  .info-item {
                      background: #ecf0f1;
                      padding: 15px;
                      border-radius: 6px;
                      text-align: center;
                  }
                  .info-item strong { color: #2c3e50; display: block; margin-bottom: 5px; }
                  .status-badge {
                      display: inline-block;
                      padding: 4px 12px;
                      border-radius: 20px;
                      font-size: 0.9em;
                      font-weight: bold;
                      margin-left: 10px;
                  }
                  .status-success { background: #d4edda; color: #155724; }
                  .status-warning { background: #fff3cd; color: #856404; }
                  .status-danger { background: #f8d7da; color: #721c24; }
                  .trend-chart {
                      background: white;
                      border-radius: 8px;
                      padding: 20px;
                      margin-bottom: 20px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }
                  .history-table {
                      width: 100%;
                      border-collapse: collapse;
                      background: white;
                      border-radius: 8px;
                      overflow: hidden;
                  }
                  .history-table th,
                  .history-table td {
                      padding: 12px 15px;
                      text-align: left;
                      border-bottom: 1px solid #eee;
                  }
                  .history-table th {
                      background: #f8f9fa;
                      font-weight: bold;
                      color: #2c3e50;
                  }
                  .history-table tr:hover {
                      background: #f8f9fa;
                  }
                  .comparison-section {
                      display: grid;
                      grid-template-columns: 1fr 1fr;
                      gap: 20px;
                      margin-bottom: 30px;
                  }
                  @media (max-width: 768px) {
                      .comparison-section {
                          grid-template-columns: 1fr;
                      }
                      .nav-tabs {
                          flex-direction: column;
                      }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🎭 Playwright Test Dashboard</h1>
                      <p>Comprehensive testing across all browsers with trend analysis</p>
                  </div>
                  
                  <div class="nav-tabs">
                      <button class="nav-tab active" onclick="showTab('latest')">📊 Latest Results</button>
                       <button class="nav-tab" onclick="showTab('history')">📚 History</button>
                      <button class="nav-tab" onclick="showTab('trends')">📈 Trends</button>                     
                  </div>
                  
                  <!-- Latest Results Tab -->
                  <div id="latest" class="tab-content active">
                      <div class="section">
                          <h2>📊 Latest Test Reports</h2>
                          <div class="report-grid">
                              <div class="report-card browser-chromium">
                                  <h3>🚀 Chromium</h3>
                                  <p>Google Chrome engine tests</p>
                                  <a href="latest/chromium/index.html" class="report-link">View Report</a>
                                  <a href="by-browser/chromium/index.html" class="report-link">All Chromium</a>
                              </div>
                              <div class="report-card browser-firefox">
                                  <h3>🔥 Firefox</h3>
                                  <p>Mozilla Firefox engine tests</p>
                                  <a href="latest/firefox/index.html" class="report-link">View Report</a>
                                  <a href="by-browser/firefox/index.html" class="report-link">All Firefox</a>
                              </div>
                              <div class="report-card browser-webkit">
                                  <h3>✨ WebKit</h3>
                                  <p>Safari engine tests</p>
                                  <a href="latest/webkit/index.html" class="report-link">View Report</a>
                                  <a href="by-browser/webkit/index.html" class="report-link">All WebKit</a>
                              </div>
                          </div>
                      </div>

                      <div class="section">
                          <h2>ℹ️ Run Information</h2>
                          <div class="info-grid">
                              <div class="info-item">
                                  <strong>Run ID</strong>
                                  {CURRENT_RUN_ID}
                              </div>
                              <div class="info-item">
                                  <strong>Branch</strong>
                                  {CURRENT_BRANCH}
                              </div>
                              <div class="info-item">
                                  <strong>Commit</strong>
                                  {CURRENT_COMMIT}
                              </div>
                              <div class="info-item">
                                  <strong>Timestamp</strong>
                                  {CURRENT_TIMESTAMP}
                              </div>
                              <div class="info-item">
                                  <strong>Triggered by</strong>
                                  {CURRENT_TRIGGER}
                              </div>
                              <div class="info-item">
                                  <strong>Status</strong>
                                  <span class="status-badge status-success">✅ Completed</span>
                              </div>
                          </div>
                      </div>
                  </div>
                  
                                   
                  <!-- History Tab with dynamic content -->
                  <div id="history" class="tab-content">
                      <div class="section">
                          <h2>📚 Test Run History</h2>
                          <table class="history-table">
                              <thead>
                                  <tr>
                                      <th>Run ID</th>
                                      <th>Date & Time</th>
                                      <th>Branch</th>
                                      <th>Commit</th>
                                      <th>Trigger</th>
                                      <th>Status</th>
                                      <th>Actions</th>
                                  </tr>
                              </thead>
                              <tbody id="historyTableBody">
                                  <!-- History will be loaded here by JavaScript -->
                              </tbody>
                          </table>
                      </div>
                  </div>
              </div>

               <!-- Trends Tab -->
                  <div id="trends" class="tab-content">
                      <div class="section">
                          <h2>📈 Performance Trends</h2>
                          <div class="trend-chart">
                              <h3>Test Execution Trends</h3>
                              <p>Track test performance and success rates over time</p>
                              <div id="trendsChart" style="height: 300px; display: flex; align-items: center; justify-content: center; background: #f8f9fa; border-radius: 4px;">
                                  <p>📊 Trend visualization will be available after multiple runs</p>
                              </div>
                          </div>
                          
                          <div class="comparison-section">
                              <div class="trend-chart">
                                  <h3>Browser Performance Comparison</h3>
                                  <p>Latest run performance across browsers</p>
                                  <div style="padding: 20px; text-align: center;">
                                      <div style="margin: 10px 0;">🚀 Chromium: Fast & Stable</div>
                                      <div style="margin: 10px 0;">🔥 Firefox: Consistent Performance</div>
                                      <div style="margin: 10px 0;">✨ WebKit: Safari Compatibility</div>
                                  </div>
                              </div>
                              
                              <div class="trend-chart">
                                  <h3>Success Rate</h3>
                                  <p>Test pass/fail rates over recent runs</p>
                                  <div style="padding: 20px; text-align: center;">
                                      <div style="margin: 10px 0; font-size: 24px; color: #4CAF50;">95%</div>
                                      <p>Overall success rate</p>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>

              <script>
                  function showTab(tabName) {
                      // Hide all tab contents
                      document.querySelectorAll('.tab-content').forEach(tab => {
                          tab.classList.remove('active');
                      });
                      
                      // Remove active class from all tab buttons
                      document.querySelectorAll('.nav-tab').forEach(btn => {
                          btn.classList.remove('active');
                      });
                      
                      // Show selected tab content
                      document.getElementById(tabName).classList.add('active');
                      
                      // Add active class to clicked tab button
                      event.target.classList.add('active');
                      
                      // Load history if history tab is selected
                      if (tabName === 'history') {
                          loadHistory();
                      }
                  }
                  
                  function loadHistory() {
                      fetch('./history/runs.json')
                          .then(response => response.json())
                          .then(runs => {
                              const tbody = document.getElementById('historyTableBody');
                              tbody.innerHTML = '';
                              
                              if (runs && runs.length > 0) {
                                  runs.forEach(run => {
                                      const row = document.createElement('tr');
                                      const date = new Date(run.timestamp).toLocaleString();
                                      
                                      row.innerHTML = `
                                          <td>#${run.run_id}</td>
                                          <td>${date}</td>
                                          <td>${run.branch}</td>
                                          <td>${run.commit}</td>
                                          <td>${run.trigger}</td>
                                          <td><span class="status-badge status-success">✅ ${run.status}</span></td>
                                          <td>
                                              <a href="${run.url}chromium/index.html" class="report-link" style="padding: 5px 10px; font-size: 12px;">Chromium</a>
                                              <a href="${run.url}firefox/index.html" class="report-link" style="padding: 5px 10px; font-size: 12px;">Firefox</a>
                                              <a href="${run.url}webkit/index.html" class="report-link" style="padding: 5px 10px; font-size: 12px;">WebKit</a>
                                          </td>
                                      `;
                                      tbody.appendChild(row);
                                  });
                              } else {
                                  tbody.innerHTML = '<tr><td colspan="7" style="text-align: center; padding: 40px;">No test history available yet</td></tr>';
                              }
                          })
                          .catch(error => {
                              console.error('Error loading history:', error);
                              const tbody = document.getElementById('historyTableBody');
                              tbody.innerHTML = '<tr><td colspan="7" style="text-align: center; padding: 40px;">Error loading test history</td></tr>';
                          });
                  }
                  
                  // Auto-refresh functionality for live updates
                  if (window.location.search.includes('auto-refresh=true')) {
                      setTimeout(() => {
                          window.location.reload();
                      }, 30000); // Refresh every 30 seconds
                  }
              </script>
          </body>
          </html>
          EOF
          
          # Replace placeholders with actual values
          sed -i "s/{CURRENT_RUN_ID}/${GITHUB_RUN_ID}/g" reports/index.html
          sed -i "s/{CURRENT_BRANCH}/${GITHUB_REF_NAME}/g" reports/index.html  
          sed -i "s/{CURRENT_COMMIT}/${GITHUB_SHA:0:7}/g" reports/index.html
          sed -i "s/{CURRENT_TIMESTAMP}/${{ needs.validate.outputs.run-timestamp }}/g" reports/index.html
          sed -i "s/{CURRENT_TRIGGER}/${GITHUB_EVENT_NAME}/g" reports/index.html

      # 5. Upload consolidated artifact for Pages
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports

      # 6. Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Health check after deployment
  health-check:
    needs: deploy-reports
    runs-on: ubuntu-latest
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging')
    
    outputs:
      health-status: ${{ steps.health.outputs.reports-status }}
    
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check reports accessibility
        id: health
        run: |
          echo "🔍 Checking deployment health..."
          REPORTS_URL="${{ needs.deploy-reports.outputs.page_url }}"
          
          if curl -f -s "${REPORTS_URL}" > /dev/null; then
            echo "✅ Reports are accessible"
            echo "reports-status=healthy" >> $GITHUB_OUTPUT
          else
            echo "❌ Reports are not accessible"
            echo "reports-status=unhealthy" >> $GITHUB_OUTPUT
          fi
          
          echo "Reports URL: ${REPORTS_URL}"